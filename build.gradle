buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' } //Maven
        mavenCentral() //Also Maven
        jcenter() //Dunno
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' } //Mixins
        maven { url = 'https://maven.parchmentmc.org' } //Parchment
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: false //Forge
        classpath "org.spongepowered:mixingradle:${mixingradle_version}" //Mixins
        classpath "org.parchmentmc:librarian:${librarian_version}" //Parchment
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "destroy.refmap.json"
}

//Mod Details
version = '0.0.0'
group = 'com.petrolpark.destroy'
archivesBaseName = 'destroy'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) //Set Java version

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=create.mixins.json'
            arg '-mixin.config=flywheel.mixins.json'
            property 'forge.logging.console.level', 'info'
            mods {
                destroy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg '-mixin.config=create.mixins.json'
            property 'forge.logging.console.level', 'info'
            mods {
                destroy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'destroy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                destroy {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { //JEI
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven { //JEI mirror
        name "ModMaven"
        url "https://modmaven.dev"
    }
    maven { //Create, Flywheel and Registrate
        name = 'tterag maven'
        url = 'https://www.cursemaven.com'
    }
    maven { //Curse Maven
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    //MC
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")
    
    //Create
    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }

    //Flywheel
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

    //Registrate
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes([
                "Specification-Title"     : "destroy",
                "Specification-Vendor"    : "petrolpark",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "petrolpark",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}